<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd">
        
    <!-- Redis连接池配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 控制一个pool能分配多少个jedis实例 -->
        <property name="maxTotal" value="${redis.pool.maxActive}" />
        <!-- 连接池中最多空闲多少个maxIdle个连接，这里为20，表示即使没有数据库连接时依然可以保持20空闲的连接，而不被清除，处于待命状态，随时连接 -->
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <!-- 最大等待时间，当没有可用连接时，连接池等待连接被归还的最大时间（以毫秒计数），超过时间即抛出异常 -->
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <!-- 在获取连接时，检查有效性 -->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>
    
    <!-- 创建Redis连接池，并做相关配置 -->
    <bean id="jedisWritePool" class="com.cn.niecl.common.redis.JedisPoolWriper"
        depends-on="jedisPoolConfig">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1" value="${redis.hostname}" />
        <constructor-arg index="2" value="${redis.port}" type="int" />
    </bean>
    
    <!-- Spring提供的Redis连接工厂 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
		<!-- 连接池配置. -->
		<property name="poolConfig" ref="jedisPoolConfig" />
		<!-- Redis服务主机. -->
		<property name="hostName" value="${redis.hostname}" />
		<!-- Redis服务端口号. -->
		<property name="port" value="${redis.port}" />
		<!-- Redis服务连接密码. -->
		<!-- <property name="password" value="${redis.password}" /> -->
		<!-- 连超时设置. -->
		<property name="timeout" value="15000" />
		<!-- 是否使用连接池. -->
		<property name="usePool" value="true" />
	</bean>
	
	<!-- Spring提供的访问Redis类. -->
	<bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<!-- <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
	</bean>
    
    <!-- 创建Redis工具类，封装好Redis的连接以进行相关操作 -->
    <bean id="jedisUtil" class="com.cn.niecl.common.redis.JedisUtil"
        scope="singleton">
        <property name="jedisPool">
            <ref bean="jedisWritePool" />
        </property>
    </bean>
    <bean id="jedisKeys" class="com.cn.niecl.common.redis.JedisUtil$Keys"
        scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    <bean id="jedisStrings" class="com.cn.niecl.common.redis.JedisUtil$Strings"
        scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    <bean id="jedisLists" class="com.cn.niecl.common.redis.JedisUtil$Lists"
        scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    <bean id="jedisSets" class="com.cn.niecl.common.redis.JedisUtil$Sets"
        scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    <bean id="jedisHash" class="com.cn.niecl.common.redis.JedisUtil$Hash"
        scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    
</beans>